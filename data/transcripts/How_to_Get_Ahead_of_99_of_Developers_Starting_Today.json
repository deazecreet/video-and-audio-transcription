{
  "language": "en",
  "text": "Yo. I've been coding for something like seven or eight years now, but for the first four of that journey, I barely made any progress. Finally, after all that time, just a month ago, I built and launched my first commercial SaaS product in beta after three months of building the MVP. Learning to code and applying those skills to building your own app or landing a job is difficult, but I've put together 20 pieces of advice that I wish I heard when I first started. These are going to be more focused on building apps just because that's what I'm interested in right now, but if you are just wanting to land your first software engineering job, this will be helpful as well. Number one, your idea doesn't matter. I've wanted to build my own iOS apps, games, and a SaaS product for years, but I was always bogged down in trying to find the perfect idea. I thought that if I didn't come up with a unique concept that's never been attempted before, it wasn't worth building. I think that's completely wrong and would actually encourage my younger self to build something that has been done before because it proves somebody cares enough about the solution. Your idea itself is worthless, I'm sorry. The execution is what matters. Number two, for the love of God, start now. One of the things I'm most angered with myself about is how long it took me to finally start taking action. I've been learning on and off how to code for years, but it's really been in the last four since I started my computer science degree and really the last year and a half that I've actually coded consistently on real projects. When I was in high school, I would watch a few videos or code a super small to-do app once every few weeks, run into a roadblock, and then not code again for another few weeks until I felt some sort of motivation. If you've been thinking for any amount of time that you want to start coding or do it more, the moment you're done watching this video, of course, go and code something and continue doing that every single day. Number three, no zero days. If you're just starting to learn to code, every day that you're not coding will be detrimental to you retaining the knowledge you're learning from tutorials or practice building projects. By far, the number one habit I've gotten into is coding pretty much every single day, of course outside of my day job, even if it was just for 30 minutes. If you're working on a large app, a small amount of time like that doesn't feel like enough to make any progress, so it's very easy to say, you know what, I'll take off today and get back to it tomorrow. But this is how you end up getting into a cycle of missing days and losing momentum. Number four is know your goal. This for me has really helped me to show up when I just don't feel like it. There's literally hundreds if not thousands of different things you can do with this skill of programming, be that working as an engineer, doing freelance work, building websites for businesses, making your own commercial apps, creating games, the list goes on. If you want to make a game, unless you're a cracked developer or enjoy putting yourself through pain, you'll need to learn a game engine like Godot, Unity, or Unreal Engine, and thus GDScript, C Sharp, C++, or Visual Scripting are among the things that you need to understand. If like me, you've been wanting to build your first SaaS, focusing on learning web technologies was the obvious path. Number five, your language does not matter. As developers, learning new languages and frameworks is a ton of fun, but it also makes the choice of which you want to learn using projects so much more overwhelming. The thing I need to remind myself of often is that your language or technology does not matter. They all have their strengths and weaknesses, of course, and are better for different purposes, but it doesn't matter if your backend API is in Go or TypeScript, just fucking choose a language and move on. If you're constantly learning different languages or jumping between one of the 17 different JavaScript frameworks, you're going to slow down your progress. Picking one tech stack that you like and can begin to understand really becomes a superpower. When I decided to start working on my app, CreatorKiwi, I chose Next.js for the front end because I had enjoyed using it building my personal site and blog, and then I chose Go for the backend because it was a language I had used in school, kind of liked, and heard good things about it in terms of performance and code simplicity. Now that I have a good amount of experience working with both these technologies, I'm a much faster developer with them. I understand how to use these tools, and any other project that I go to work on, this is what I'm going to use. Again, the actual technologies you're using doesn't really matter, but if you're interested in seeing all the different tools that have been helpful for me in building my first app, I'll leave a link to that list in the description. Number six, use tutorials sparingly. This was the biggest trap that I fell into for years, over-relying on tutorials. I was stuck in tutorial hell, which is where I would watch tons of videos about how to code, but if I ever tried to go and implement something for myself, I felt completely lost. Tutorials give you the sense of progress and make you feel like you're learning, but if you're not using them in the right way, the chances are that you'll retain very little of the info. For me, the most effective way I found of learning with tutorials is using a crash course video to understand syntax and the general patterns of a language, and then immediately get into applying that topic in my own project. I found over time that I much prefer this style of learning where if I do come across a roadblock, I can just search into Google, Ask AI, or find some specific YouTube video that guides me with that specific issue of having. If you're brand new to coding and haven't used other languages before, you will probably need to use more tutorials to understand more of the basic concepts, but what I urge you to do is do all of the exercises, even if they feel simple, that a course you're taking tells you to, and even better, create your own exercises like after every video you watch, finding some way to apply what you just learned without copying any solution. Number seven, avoid AI. I know this is probably a hot take but just being super real, if I were talking to my younger self trying to learn coding today, I would tell them to completely ignore AI. Right now you hear a lot of people talking about how you can use AI to ship an app in three days and make a million dollars but that makes it really easy to get into this mindset of chasing quick wins, but I still think that keeping a long-term approach with building is how you stay in this game. I'm sure someone's coined this term already, but AI hell is 100 times worse than tutorial hell. If you're using AI when you don't actually know how to code, it'll feel like magic and like you're making tons of progress. You can ask AI to fix or add anything, and for a while, it'll probably do a pretty good job. The problem is that as your code base is growing in complexity, it's going to have bugs and you won't understand how it works. And then the AI will end up creating more and more bugs and attempt to fix the old ones. Taking your time and learning the hard way is how you're going to pick up the essential concepts of the tech you're working with and later be able to guide AI and have it help you be more productive. When I was first learning Go, I realized that I relied way too much on AI for like a month or two and remembered very little of how the language actually worked. After that point, I've mostly stopped using AI for Go entirely, only asking it questions when I get stuck. If you're using an AI IDE like Cursor, I highly recommend for any code that you don't know how to write, use the ask mode instead of letting the agent write it. Once you understand what you're doing and are simply asking the agent to write it faster, you can review that code and be confident whether or not it's correct. Number eight, project-based learning is the best method. Now this is of course just my opinion, and if tutorials do work really well for you, that's awesome, but for me, I found that I much more enjoy working on a specific project and then supplementing it with tutorials, YouTube videos, Google searches, etc., so that when I'm running into problems, I can use those to help me with my project. I learned Unreal Engine and game development as a whole for the first time in my second last semester of college, where I had a class where it was set up that the entire semester we worked on a single game. We had a few lectures in the first couple of weeks that were the basics of Unreal, showing us how to use the editor, what blueprints were, and just enough that we could feel somewhat comfortable. Then, the rest of the semester, it was up to us to finish our game purely on our own, so I had to learn how to use blueprints, which technically isn't coding, but it's still using the same concepts of programming and calling functions, having loops, etc. After that class ended, I ended up working for the first few months of 2025 with my brother on our first game, and having that project to work on taught me a ton about game development with Unreal specifically.  Unfortunately, I have put that game aside for the moment to focus on other projects, but the reason I mention that is I talked about for years wanting to learn game development, and in just a couple of months when working on a very specific project, I was able to learn a ton. Nine is focus on solving problems. This concept is thrown around a lot, and for the first few years I was learning to code, I thought it was BS. That belief honestly held me back more than I realized, but at the end of the day, the purpose of writing code is to build something that solves a problem. When you're looking for an idea for a project, the best way to find one is solve a problem that you've experienced or know that somebody else has. When I was trying to come up with ideas for SaaS products I could build, I had a Notion database full of ideas, but more importantly, they were focused around problems that I had encountered. When you're focused on problems like, I don't know which of my YouTube videos drives the most leads to my newsletter, or I find XYZ tool for doing some task really confusing, it becomes much easier to figure out what you could build to solve that pain point. Number 10 is create building blocks. What I mean by this is write your code in such a way that it's modular enough to act like a building block. You can import it into a completely different project and it's able to work just fine. Whenever you're building UI components or even writing backend authentication systems, when you're focused on making each of these systems a reusable building block, you write better code and save yourself a ton of time in the future when you want to reuse this functionality. If you're totally stumped on what to build, creating a template for yourself is a fantastic first project idea. This is actually what I built before I started working on CreatorKiwi, which is my link conversion tracking app for creators and founders. I had a Next.js and Go full stack app that had billing and authentication setup so that whenever I built a SaaS product, I didn't have to rewrite any of that boilerplate code. That saved me a ton of time when I decided that I wanted to work on CreatorKiwi so I could immediately get into writing business logic. Number 11 is have a proper project management workflow. For me, this means using linear to write down all of the features, improvements, and bugs that I want to work on. This is one place where I can go to see what is the highest priority thing to work on and also figure out how much progress I'm making over time. It doesn't need to be complicated. Notion or Trello can also work well. I think it's just about having a single place where you're documenting your work and thinking about how your projects will evolve. Number 12 is avoid scope creep. When you're working on a project, the number one thing that will slow you down and prevent you from shipping is adding on way too many features. If I was really clear on what I was trying to build with my startup I probably could have shipped in what took me three months about a month month and a half instead because I started the project wanting to basically create social media management tools on top of my main link conversion tracking functionality and then getting into CRM like features and a ton of other blow it just took me a lot more time from day one you should be super focused on what your MVP looks like which is the smallest and simplest version of the product that is still useful and can prove whether anyone cares. Number 13, actually ship something. In my eight years of coding, I've literally shipped twice, if you don't want to count like my portfolio websites. That was one shitty side project, frankly, and my SaaS. Now that I've actually worked on a real project and finished the MVP, I'm much more confident in my coding abilities and the fact that I can make things. Making the scope of your project smaller will help a ton with this. And honestly, if you're struggling to finish the projects you're working on, the best thing you can do is either significantly cut down on the scope or just choose a small project you can finish in a week. Make a game that you can publish on H.I.O. next Sunday or build an app and send me a DM on Twitter with your domain and I'll check it out. Number 14, give yourself deadlines. This one is huge. Having a specific day that you intend on finishing your project will work wonders for your productivity. I took a quick trip home last month and randomly decided that you know what I'm gonna launch my private beta next week and I did it. If I didn't give myself this frankly arbitrary date I'd probably find a way to still be working on my quote MVP today. 15. Know when to cut your losses. I was just working on a new feature to build simple landing pages so that tracking email signups was easier but it got to be a lot harder than I realized. I spent like a week and a half on it and really started to feel unmotivated because it was super difficult and I wasn't shipping anything else in my app. I had to make the hard decision to put aside all of that work I just did for the moment and work on a quick one-day feature to give myself that quick win and get back to actually working on important things. I'm not saying to have 20 unfinished projects, but if you know what you're building is a waste of time or should be set aside, don't feel bad about doing it. 16. Don't be a perfectionist. One of the things that really slowed me down in shipping my first app was trying to polish everything. I wanted the UI to look super clean and have tons of keyboard shortcuts and subtle animations. All that's cool, but it only slowed me down and prevented me from figuring out whether anybody cared about what I was building. 17 is use version control. When you're working alone on a project, it might seem like a waste of time to use Git and work on different branches and have PRs, but when you're using a real version control workflow, it makes staying focused on one task at a time a lot easier. It also means that once you've launched, you can more easily jump between different work or revert your changes if you broke something. 18. Make marketing a priority. This is mainly applicable if you're trying to build a commercial project, but this also applies in just showing off what you're working on to potential employers. Something I wish I had done earlier was thinking more about how will people actually figure out about what I'm working on. As developers, I think that the idea of promoting what we're working on is really in the back of our mind. The idea of build it and they will come is simply false. You do need to build a great product, but you still have to tell people that it exists. This could be by writing blog articles, making YouTube content, or cold emailing potential users. Just anything to generate awareness for your project. 19. Keep track of the progress you're making. I found that being able to take a step back for a moment and think about what I've been able to build is a great way to stay motivated when working on my app. A more tactical way of doing this, which I honestly don't do enough, is keeping a work log where every day when you finish, you write down everything you got done. I think this is especially helpful if you're working on a large project like a game where it can feel like after two weeks of effort, you have nothing to show for it. 20. Play the long game. This is by far the thing I have to remind myself of the most because I love programming. I love building stuff and I want to do this for a while, but I often fall into that trap of wanting to build a new project super fast and ship it out in a day use ai blah blah blah but i think that where your skills really develop is where you take it slow you really try to understand the tech you're working with so that in the future you get those dividends and then you're able to ship stuff really fast and actually understand what's going on so those were 20 things i wish i knew when i first started programming if you found this video helpful you'll want to watch this one next where i talk about how i tricked my brain to be addicted to coding.",
  "chunks": [
    {
      "timestamp": [
        0.48,
        5.44
      ],
      "text": " Yo. I've been coding for something like seven or eight years now, but for the first four of that"
    },
    {
      "timestamp": [
        5.44,
        10.7
      ],
      "text": " journey, I barely made any progress. Finally, after all that time, just a month ago, I built"
    },
    {
      "timestamp": [
        10.7,
        15.6
      ],
      "text": " and launched my first commercial SaaS product in beta after three months of building the MVP."
    },
    {
      "timestamp": [
        15.88,
        20.08
      ],
      "text": " Learning to code and applying those skills to building your own app or landing a job is difficult,"
    },
    {
      "timestamp": [
        20.56,
        24.98
      ],
      "text": " but I've put together 20 pieces of advice that I wish I heard when I first started. These are"
    },
    {
      "timestamp": [
        24.98,
        28.38
      ],
      "text": " going to be more focused on building apps just because that's what I'm interested in right now,"
    },
    {
      "timestamp": [
        28.38,
        31.24
      ],
      "text": " but if you are just wanting to land your first software engineering job,"
    },
    {
      "timestamp": [
        31.34,
        32.18
      ],
      "text": " this will be helpful as well."
    },
    {
      "timestamp": [
        32.26,
        34.14
      ],
      "text": " Number one, your idea doesn't matter."
    },
    {
      "timestamp": [
        34.3,
        38.56
      ],
      "text": " I've wanted to build my own iOS apps, games, and a SaaS product for years,"
    },
    {
      "timestamp": [
        38.7,
        42.44
      ],
      "text": " but I was always bogged down in trying to find the perfect idea."
    },
    {
      "timestamp": [
        42.6,
        45.04
      ],
      "text": " I thought that if I didn't come up with a unique concept"
    },
    {
      "timestamp": [
        45.04,
        47.94
      ],
      "text": " that's never been attempted before, it wasn't worth building."
    },
    {
      "timestamp": [
        48.06,
        51.14
      ],
      "text": " I think that's completely wrong and would actually encourage my younger self"
    },
    {
      "timestamp": [
        51.14,
        53.26
      ],
      "text": " to build something that has been done before"
    },
    {
      "timestamp": [
        53.26,
        56.02
      ],
      "text": " because it proves somebody cares enough about the solution."
    },
    {
      "timestamp": [
        56.02,
        58.48
      ],
      "text": " Your idea itself is worthless, I'm sorry."
    },
    {
      "timestamp": [
        58.62,
        60.54
      ],
      "text": " The execution is what matters."
    },
    {
      "timestamp": [
        60.72,
        63.52
      ],
      "text": " Number two, for the love of God, start now."
    },
    {
      "timestamp": [
        63.6,
        68.72
      ],
      "text": " One of the things I'm most angered with myself about is how long it took me to finally start"
    },
    {
      "timestamp": [
        68.72,
        69.38
      ],
      "text": " taking action."
    },
    {
      "timestamp": [
        69.54,
        73.36
      ],
      "text": " I've been learning on and off how to code for years, but it's really been in the last"
    },
    {
      "timestamp": [
        73.36,
        78.16
      ],
      "text": " four since I started my computer science degree and really the last year and a half that I've"
    },
    {
      "timestamp": [
        78.16,
        81.36
      ],
      "text": " actually coded consistently on real projects."
    },
    {
      "timestamp": [
        81.5,
        85.3
      ],
      "text": " When I was in high school, I would watch a few videos or code a super small to-do app"
    },
    {
      "timestamp": [
        85.3,
        90.04
      ],
      "text": " once every few weeks, run into a roadblock, and then not code again for another few weeks until"
    },
    {
      "timestamp": [
        90.04,
        94.18
      ],
      "text": " I felt some sort of motivation. If you've been thinking for any amount of time that you want to"
    },
    {
      "timestamp": [
        94.18,
        98.68
      ],
      "text": " start coding or do it more, the moment you're done watching this video, of course, go and code"
    },
    {
      "timestamp": [
        98.68,
        104.12
      ],
      "text": " something and continue doing that every single day. Number three, no zero days. If you're just"
    },
    {
      "timestamp": [
        104.12,
        108.54
      ],
      "text": " starting to learn to code, every day that you're not coding will be detrimental to you retaining"
    },
    {
      "timestamp": [
        108.54,
        112.92
      ],
      "text": " the knowledge you're learning from tutorials or practice building projects. By far, the number"
    },
    {
      "timestamp": [
        112.92,
        117.34
      ],
      "text": " one habit I've gotten into is coding pretty much every single day, of course outside of my day job,"
    },
    {
      "timestamp": [
        117.44,
        121.5
      ],
      "text": " even if it was just for 30 minutes. If you're working on a large app, a small amount of time"
    },
    {
      "timestamp": [
        121.5,
        125.78
      ],
      "text": " like that doesn't feel like enough to make any progress, so it's very easy to say, you know what,"
    },
    {
      "timestamp": [
        125.8,
        130.22
      ],
      "text": " I'll take off today and get back to it tomorrow. But this is how you end up getting into a cycle"
    },
    {
      "timestamp": [
        130.22,
        135.74
      ],
      "text": " of missing days and losing momentum. Number four is know your goal. This for me has really helped"
    },
    {
      "timestamp": [
        135.74,
        140.66
      ],
      "text": " me to show up when I just don't feel like it. There's literally hundreds if not thousands of"
    },
    {
      "timestamp": [
        140.66,
        144.84
      ],
      "text": " different things you can do with this skill of programming, be that working as an engineer,"
    },
    {
      "timestamp": [
        145.1,
        149.54
      ],
      "text": " doing freelance work, building websites for businesses, making your own commercial apps,"
    },
    {
      "timestamp": [
        149.78,
        153.9
      ],
      "text": " creating games, the list goes on. If you want to make a game, unless you're a cracked developer"
    },
    {
      "timestamp": [
        153.9,
        158.56
      ],
      "text": " or enjoy putting yourself through pain, you'll need to learn a game engine like Godot, Unity,"
    },
    {
      "timestamp": [
        158.72,
        164.4
      ],
      "text": " or Unreal Engine, and thus GDScript, C Sharp, C++, or Visual Scripting are among the things"
    },
    {
      "timestamp": [
        164.4,
        168.34
      ],
      "text": " that you need to understand. If like me, you've been wanting to build your first SaaS, focusing"
    },
    {
      "timestamp": [
        168.34,
        173.52
      ],
      "text": " on learning web technologies was the obvious path. Number five, your language does not matter."
    },
    {
      "timestamp": [
        173.72,
        178.06
      ],
      "text": " As developers, learning new languages and frameworks is a ton of fun, but it also makes"
    },
    {
      "timestamp": [
        178.06,
        182.62
      ],
      "text": " the choice of which you want to learn using projects so much more overwhelming. The thing"
    },
    {
      "timestamp": [
        182.62,
        187.74
      ],
      "text": " I need to remind myself of often is that your language or technology does not matter. They all"
    },
    {
      "timestamp": [
        187.74,
        191.56
      ],
      "text": " have their strengths and weaknesses, of course, and are better for different purposes, but it"
    },
    {
      "timestamp": [
        191.56,
        196.16
      ],
      "text": " doesn't matter if your backend API is in Go or TypeScript, just fucking choose a language and"
    },
    {
      "timestamp": [
        196.16,
        200.24
      ],
      "text": " move on. If you're constantly learning different languages or jumping between one of the 17"
    },
    {
      "timestamp": [
        200.24,
        205.28
      ],
      "text": " different JavaScript frameworks, you're going to slow down your progress. Picking one tech stack"
    },
    {
      "timestamp": [
        205.28,
        210.1
      ],
      "text": " that you like and can begin to understand really becomes a superpower. When I decided to start"
    },
    {
      "timestamp": [
        210.1,
        214.86
      ],
      "text": " working on my app, CreatorKiwi, I chose Next.js for the front end because I had enjoyed using it"
    },
    {
      "timestamp": [
        214.86,
        219.64
      ],
      "text": " building my personal site and blog, and then I chose Go for the backend because it was a language"
    },
    {
      "timestamp": [
        219.64,
        224.0
      ],
      "text": " I had used in school, kind of liked, and heard good things about it in terms of performance and"
    },
    {
      "timestamp": [
        224.0,
        228.1
      ],
      "text": " code simplicity. Now that I have a good amount of experience working with both these technologies,"
    },
    {
      "timestamp": [
        228.32,
        232.88
      ],
      "text": " I'm a much faster developer with them. I understand how to use these tools, and any other project that"
    },
    {
      "timestamp": [
        232.88,
        237.44
      ],
      "text": " I go to work on, this is what I'm going to use. Again, the actual technologies you're using doesn't"
    },
    {
      "timestamp": [
        237.44,
        241.98
      ],
      "text": " really matter, but if you're interested in seeing all the different tools that have been helpful for"
    },
    {
      "timestamp": [
        241.98,
        247.16
      ],
      "text": " me in building my first app, I'll leave a link to that list in the description. Number six, use"
    },
    {
      "timestamp": [
        247.16,
        253.2
      ],
      "text": " tutorials sparingly. This was the biggest trap that I fell into for years, over-relying on tutorials."
    },
    {
      "timestamp": [
        253.7,
        258.1
      ],
      "text": " I was stuck in tutorial hell, which is where I would watch tons of videos about how to"
    },
    {
      "timestamp": [
        258.1,
        263.08
      ],
      "text": " code, but if I ever tried to go and implement something for myself, I felt completely lost."
    },
    {
      "timestamp": [
        263.26,
        266.76
      ],
      "text": " Tutorials give you the sense of progress and make you feel like you're learning, but if"
    },
    {
      "timestamp": [
        266.76,
        270.5
      ],
      "text": " you're not using them in the right way, the chances are that you'll retain very little"
    },
    {
      "timestamp": [
        270.5,
        271.1
      ],
      "text": " of the info."
    },
    {
      "timestamp": [
        271.26,
        275.72
      ],
      "text": " For me, the most effective way I found of learning with tutorials is using a crash course"
    },
    {
      "timestamp": [
        275.72,
        280.64
      ],
      "text": " video to understand syntax and the general patterns of a language, and then immediately"
    },
    {
      "timestamp": [
        280.64,
        285.6
      ],
      "text": " get into applying that topic in my own project. I found over time that I much prefer this style"
    },
    {
      "timestamp": [
        285.6,
        290.62
      ],
      "text": " of learning where if I do come across a roadblock, I can just search into Google, Ask AI, or find some"
    },
    {
      "timestamp": [
        290.62,
        295.2
      ],
      "text": " specific YouTube video that guides me with that specific issue of having. If you're brand new to"
    },
    {
      "timestamp": [
        295.2,
        299.94
      ],
      "text": " coding and haven't used other languages before, you will probably need to use more tutorials to"
    },
    {
      "timestamp": [
        299.94,
        305.24
      ],
      "text": " understand more of the basic concepts, but what I urge you to do is do all of the exercises, even"
    },
    {
      "timestamp": [
        305.24,
        309.82
      ],
      "text": " if they feel simple, that a course you're taking tells you to, and even better, create your own"
    },
    {
      "timestamp": [
        309.82,
        314.96
      ],
      "text": " exercises like after every video you watch, finding some way to apply what you just learned"
    },
    {
      "timestamp": [
        314.96,
        321.52
      ],
      "text": " without copying any solution. Number seven, avoid AI. I know this is probably a hot take but just"
    },
    {
      "timestamp": [
        321.52,
        326.66
      ],
      "text": " being super real, if I were talking to my younger self trying to learn coding today, I would tell"
    },
    {
      "timestamp": [
        326.66,
        331.64
      ],
      "text": " them to completely ignore AI. Right now you hear a lot of people talking about how you can use AI to"
    },
    {
      "timestamp": [
        331.64,
        336.66
      ],
      "text": " ship an app in three days and make a million dollars but that makes it really easy to get"
    },
    {
      "timestamp": [
        336.66,
        342.46
      ],
      "text": " into this mindset of chasing quick wins, but I still think that keeping a long-term approach"
    },
    {
      "timestamp": [
        342.46,
        347.52
      ],
      "text": " with building is how you stay in this game. I'm sure someone's coined this term already, but AI"
    },
    {
      "timestamp": [
        347.52,
        353.08
      ],
      "text": " hell is 100 times worse than tutorial hell. If you're using AI when you don't actually know how"
    },
    {
      "timestamp": [
        353.08,
        358.24
      ],
      "text": " to code, it'll feel like magic and like you're making tons of progress. You can ask AI to fix"
    },
    {
      "timestamp": [
        358.24,
        363.34
      ],
      "text": " or add anything, and for a while, it'll probably do a pretty good job. The problem is that as your"
    },
    {
      "timestamp": [
        363.34,
        368.42
      ],
      "text": " code base is growing in complexity, it's going to have bugs and you won't understand how it works."
    },
    {
      "timestamp": [
        368.54,
        373.38
      ],
      "text": " And then the AI will end up creating more and more bugs and attempt to fix the old ones. Taking your"
    },
    {
      "timestamp": [
        373.38,
        377.4
      ],
      "text": " time and learning the hard way is how you're going to pick up the essential concepts of the tech"
    },
    {
      "timestamp": [
        377.4,
        382.08
      ],
      "text": " you're working with and later be able to guide AI and have it help you be more productive. When I"
    },
    {
      "timestamp": [
        382.08,
        387.22
      ],
      "text": " was first learning Go, I realized that I relied way too much on AI for like a month or two and"
    },
    {
      "timestamp": [
        387.22,
        392.7
      ],
      "text": " remembered very little of how the language actually worked. After that point, I've mostly"
    },
    {
      "timestamp": [
        392.7,
        398.3
      ],
      "text": " stopped using AI for Go entirely, only asking it questions when I get stuck. If you're using an AI"
    },
    {
      "timestamp": [
        398.3,
        404.46
      ],
      "text": " IDE like Cursor, I highly recommend for any code that you don't know how to write, use the ask"
    },
    {
      "timestamp": [
        404.46,
        408.68
      ],
      "text": " mode instead of letting the agent write it. Once you understand what you're doing and are simply"
    },
    {
      "timestamp": [
        408.68,
        413.5
      ],
      "text": " asking the agent to write it faster, you can review that code and be confident whether or not"
    },
    {
      "timestamp": [
        413.5,
        419.02
      ],
      "text": " it's correct. Number eight, project-based learning is the best method. Now this is of course just my"
    },
    {
      "timestamp": [
        419.02,
        423.64
      ],
      "text": " opinion, and if tutorials do work really well for you, that's awesome, but for me, I found that I"
    },
    {
      "timestamp": [
        423.64,
        430.04
      ],
      "text": " much more enjoy working on a specific project and then supplementing it with tutorials, YouTube"
    },
    {
      "timestamp": [
        430.04,
        435.08
      ],
      "text": " videos, Google searches, etc., so that when I'm running into problems, I can use those to help me"
    },
    {
      "timestamp": [
        435.08,
        439.22
      ],
      "text": " with my project. I learned Unreal Engine and game development as a whole for the first time in my"
    },
    {
      "timestamp": [
        439.22,
        444.08
      ],
      "text": " second last semester of college, where I had a class where it was set up that the entire semester"
    },
    {
      "timestamp": [
        444.08,
        448.94
      ],
      "text": " we worked on a single game. We had a few lectures in the first couple of weeks that were the basics"
    },
    {
      "timestamp": [
        448.94,
        453.8
      ],
      "text": " of Unreal, showing us how to use the editor, what blueprints were, and just enough that we could"
    },
    {
      "timestamp": [
        453.8,
        459.56
      ],
      "text": " feel somewhat comfortable. Then, the rest of the semester, it was up to us to finish our game purely"
    },
    {
      "timestamp": [
        459.56,
        463.54
      ],
      "text": " on our own, so I had to learn how to use blueprints, which technically isn't coding, but it's still"
    },
    {
      "timestamp": [
        463.54,
        468.12
      ],
      "text": " using the same concepts of programming and calling functions, having loops, etc. After that class"
    },
    {
      "timestamp": [
        468.12,
        473.7
      ],
      "text": " ended, I ended up working for the first few months of 2025 with my brother on our first game, and"
    },
    {
      "timestamp": [
        473.7,
        478.52
      ],
      "text": " having that project to work on taught me a ton about game development with Unreal specifically."
    },
    {
      "timestamp": [
        478.7,
        478.52
      ],
      "text": ""
    },
    {
      "timestamp": [
        493.36,
        493.54
      ],
      "text": " Unfortunately, I have put that game aside for the moment to focus on other projects, but the reason I mention that is I talked about for years wanting to learn game development, and in just a couple of months when working on a very specific project, I was able to learn a ton."
    },
    {
      "timestamp": [
        496.26,
        496.48
      ],
      "text": " Nine is focus on solving problems."
    },
    {
      "timestamp": [
        501.66,
        501.84
      ],
      "text": " This concept is thrown around a lot, and for the first few years I was learning to code, I thought it was BS."
    },
    {
      "timestamp": [
        501.66,
        510.4
      ],
      "text": " That belief honestly held me back more than I realized, but at the end of the day, the purpose of writing code is to build something that solves a problem."
    },
    {
      "timestamp": [
        510.6,
        518.14
      ],
      "text": " When you're looking for an idea for a project, the best way to find one is solve a problem that you've experienced or know that somebody else has."
    },
    {
      "timestamp": [
        518.3,
        527.2
      ],
      "text": " When I was trying to come up with ideas for SaaS products I could build, I had a Notion database full of ideas, but more importantly, they were focused around problems that I had encountered."
    },
    {
      "timestamp": [
        527.2,
        540.5
      ],
      "text": " When you're focused on problems like, I don't know which of my YouTube videos drives the most leads to my newsletter, or I find XYZ tool for doing some task really confusing, it becomes much easier to figure out what you could build to solve that pain point."
    },
    {
      "timestamp": [
        540.64,
        542.86
      ],
      "text": " Number 10 is create building blocks."
    },
    {
      "timestamp": [
        543.08,
        549.28
      ],
      "text": " What I mean by this is write your code in such a way that it's modular enough to act like a building block."
    },
    {
      "timestamp": [
        549.42,
        553.4
      ],
      "text": " You can import it into a completely different project and it's able to work just fine."
    },
    {
      "timestamp": [
        553.4,
        557.72
      ],
      "text": " Whenever you're building UI components or even writing backend authentication systems,"
    },
    {
      "timestamp": [
        558.1,
        562.24
      ],
      "text": " when you're focused on making each of these systems a reusable building block,"
    },
    {
      "timestamp": [
        562.34,
        567.54
      ],
      "text": " you write better code and save yourself a ton of time in the future when you want to reuse this functionality."
    },
    {
      "timestamp": [
        567.8,
        573.48
      ],
      "text": " If you're totally stumped on what to build, creating a template for yourself is a fantastic first project idea."
    },
    {
      "timestamp": [
        573.56,
        576.66
      ],
      "text": " This is actually what I built before I started working on CreatorKiwi,"
    },
    {
      "timestamp": [
        576.84,
        579.78
      ],
      "text": " which is my link conversion tracking app for creators and founders."
    },
    {
      "timestamp": [
        579.78,
        585.08
      ],
      "text": " I had a Next.js and Go full stack app that had billing and authentication setup so that whenever"
    },
    {
      "timestamp": [
        585.08,
        590.8
      ],
      "text": " I built a SaaS product, I didn't have to rewrite any of that boilerplate code. That saved me a ton"
    },
    {
      "timestamp": [
        590.8,
        595.66
      ],
      "text": " of time when I decided that I wanted to work on CreatorKiwi so I could immediately get into"
    },
    {
      "timestamp": [
        595.66,
        600.48
      ],
      "text": " writing business logic. Number 11 is have a proper project management workflow. For me,"
    },
    {
      "timestamp": [
        600.58,
        605.52
      ],
      "text": " this means using linear to write down all of the features, improvements, and bugs that I want to"
    },
    {
      "timestamp": [
        605.52,
        610.2
      ],
      "text": " work on. This is one place where I can go to see what is the highest priority thing to work on"
    },
    {
      "timestamp": [
        610.2,
        614.78
      ],
      "text": " and also figure out how much progress I'm making over time. It doesn't need to be complicated."
    },
    {
      "timestamp": [
        615.08,
        619.44
      ],
      "text": " Notion or Trello can also work well. I think it's just about having a single place where you're"
    },
    {
      "timestamp": [
        619.44,
        625.1
      ],
      "text": " documenting your work and thinking about how your projects will evolve. Number 12 is avoid scope"
    },
    {
      "timestamp": [
        625.1,
        629.12
      ],
      "text": " creep. When you're working on a project, the number one thing that will slow you down and"
    },
    {
      "timestamp": [
        629.12,
        634.62
      ],
      "text": " prevent you from shipping is adding on way too many features. If I was really clear on what I"
    },
    {
      "timestamp": [
        634.62,
        639.74
      ],
      "text": " was trying to build with my startup I probably could have shipped in what took me three months"
    },
    {
      "timestamp": [
        639.74,
        645.14
      ],
      "text": " about a month month and a half instead because I started the project wanting to basically create"
    },
    {
      "timestamp": [
        645.14,
        650.3
      ],
      "text": " social media management tools on top of my main link conversion tracking functionality and then"
    },
    {
      "timestamp": [
        650.3,
        655.94
      ],
      "text": " getting into CRM like features and a ton of other blow it just took me a lot more time from day one"
    },
    {
      "timestamp": [
        655.94,
        661.64
      ],
      "text": " you should be super focused on what your MVP looks like which is the smallest and simplest version of"
    },
    {
      "timestamp": [
        661.64,
        667.6
      ],
      "text": " the product that is still useful and can prove whether anyone cares. Number 13, actually ship"
    },
    {
      "timestamp": [
        667.6,
        672.92
      ],
      "text": " something. In my eight years of coding, I've literally shipped twice, if you don't want to"
    },
    {
      "timestamp": [
        672.92,
        679.18
      ],
      "text": " count like my portfolio websites. That was one shitty side project, frankly, and my SaaS. Now"
    },
    {
      "timestamp": [
        679.18,
        684.54
      ],
      "text": " that I've actually worked on a real project and finished the MVP, I'm much more confident in my"
    },
    {
      "timestamp": [
        684.54,
        689.46
      ],
      "text": " coding abilities and the fact that I can make things. Making the scope of your project smaller"
    },
    {
      "timestamp": [
        689.46,
        693.26
      ],
      "text": " will help a ton with this. And honestly, if you're struggling to finish the projects you're"
    },
    {
      "timestamp": [
        693.26,
        698.5
      ],
      "text": " working on, the best thing you can do is either significantly cut down on the scope or just choose"
    },
    {
      "timestamp": [
        698.5,
        703.26
      ],
      "text": " a small project you can finish in a week. Make a game that you can publish on H.I.O. next Sunday"
    },
    {
      "timestamp": [
        703.26,
        707.26
      ],
      "text": " or build an app and send me a DM on Twitter with your domain and I'll check it out."
    },
    {
      "timestamp": [
        707.38,
        713.3
      ],
      "text": " Number 14, give yourself deadlines. This one is huge. Having a specific day that you intend on"
    },
    {
      "timestamp": [
        713.3,
        718.22
      ],
      "text": " finishing your project will work wonders for your productivity. I took a quick trip home last month"
    },
    {
      "timestamp": [
        718.22,
        723.68
      ],
      "text": " and randomly decided that you know what I'm gonna launch my private beta next week and I did it. If"
    },
    {
      "timestamp": [
        723.68,
        729.42
      ],
      "text": " I didn't give myself this frankly arbitrary date I'd probably find a way to still be working on my"
    },
    {
      "timestamp": [
        729.42,
        736.12
      ],
      "text": " quote MVP today. 15. Know when to cut your losses. I was just working on a new feature to build simple"
    },
    {
      "timestamp": [
        736.12,
        741.4
      ],
      "text": " landing pages so that tracking email signups was easier but it got to be a lot harder than I"
    },
    {
      "timestamp": [
        741.4,
        746.54
      ],
      "text": " realized. I spent like a week and a half on it and really started to feel unmotivated because"
    },
    {
      "timestamp": [
        746.54,
        751.66
      ],
      "text": " it was super difficult and I wasn't shipping anything else in my app. I had to make the hard"
    },
    {
      "timestamp": [
        751.66,
        757.48
      ],
      "text": " decision to put aside all of that work I just did for the moment and work on a quick one-day feature"
    },
    {
      "timestamp": [
        757.48,
        762.5
      ],
      "text": " to give myself that quick win and get back to actually working on important things. I'm not"
    },
    {
      "timestamp": [
        762.5,
        766.6
      ],
      "text": " saying to have 20 unfinished projects, but if you know what you're building is a waste of time or"
    },
    {
      "timestamp": [
        766.6,
        772.36
      ],
      "text": " should be set aside, don't feel bad about doing it. 16. Don't be a perfectionist. One of the things"
    },
    {
      "timestamp": [
        772.36,
        776.96
      ],
      "text": " that really slowed me down in shipping my first app was trying to polish everything. I wanted the"
    },
    {
      "timestamp": [
        776.96,
        782.2
      ],
      "text": " UI to look super clean and have tons of keyboard shortcuts and subtle animations. All that's cool,"
    },
    {
      "timestamp": [
        782.32,
        787.18
      ],
      "text": " but it only slowed me down and prevented me from figuring out whether anybody cared about what I"
    },
    {
      "timestamp": [
        787.18,
        792.28
      ],
      "text": " was building. 17 is use version control. When you're working alone on a project, it might seem"
    },
    {
      "timestamp": [
        792.28,
        796.78
      ],
      "text": " like a waste of time to use Git and work on different branches and have PRs, but when you're"
    },
    {
      "timestamp": [
        796.78,
        802.0
      ],
      "text": " using a real version control workflow, it makes staying focused on one task at a time a lot easier."
    },
    {
      "timestamp": [
        802.0,
        806.32
      ],
      "text": " It also means that once you've launched, you can more easily jump between different work or"
    },
    {
      "timestamp": [
        806.32,
        811.42
      ],
      "text": " revert your changes if you broke something. 18. Make marketing a priority. This is mainly"
    },
    {
      "timestamp": [
        811.42,
        815.7
      ],
      "text": " applicable if you're trying to build a commercial project, but this also applies in just showing off"
    },
    {
      "timestamp": [
        815.7,
        819.96
      ],
      "text": " what you're working on to potential employers. Something I wish I had done earlier was thinking"
    },
    {
      "timestamp": [
        819.96,
        824.64
      ],
      "text": " more about how will people actually figure out about what I'm working on. As developers, I think"
    },
    {
      "timestamp": [
        824.64,
        829.08
      ],
      "text": " that the idea of promoting what we're working on is really in the back of our mind. The idea of"
    },
    {
      "timestamp": [
        829.08,
        834.14
      ],
      "text": " build it and they will come is simply false. You do need to build a great product, but you still"
    },
    {
      "timestamp": [
        834.14,
        839.58
      ],
      "text": " have to tell people that it exists. This could be by writing blog articles, making YouTube content,"
    },
    {
      "timestamp": [
        839.74,
        844.32
      ],
      "text": " or cold emailing potential users. Just anything to generate awareness for your project."
    },
    {
      "timestamp": [
        844.56,
        849.32
      ],
      "text": " 19. Keep track of the progress you're making. I found that being able to take a step back for a"
    },
    {
      "timestamp": [
        849.32,
        854.06
      ],
      "text": " moment and think about what I've been able to build is a great way to stay motivated when"
    },
    {
      "timestamp": [
        854.06,
        858.34
      ],
      "text": " working on my app. A more tactical way of doing this, which I honestly don't do enough, is keeping"
    },
    {
      "timestamp": [
        858.34,
        862.58
      ],
      "text": " a work log where every day when you finish, you write down everything you got done. I think this"
    },
    {
      "timestamp": [
        862.58,
        866.96
      ],
      "text": " is especially helpful if you're working on a large project like a game where it can feel like after"
    },
    {
      "timestamp": [
        866.96,
        872.76
      ],
      "text": " two weeks of effort, you have nothing to show for it. 20. Play the long game. This is by far the"
    },
    {
      "timestamp": [
        872.76,
        877.64
      ],
      "text": " thing I have to remind myself of the most because I love programming. I love building stuff and I"
    },
    {
      "timestamp": [
        877.64,
        882.58
      ],
      "text": " want to do this for a while, but I often fall into that trap of wanting to build a new project super"
    },
    {
      "timestamp": [
        882.58,
        888.58
      ],
      "text": " fast and ship it out in a day use ai blah blah blah but i think that where your skills really"
    },
    {
      "timestamp": [
        888.58,
        893.54
      ],
      "text": " develop is where you take it slow you really try to understand the tech you're working with so that"
    },
    {
      "timestamp": [
        893.54,
        899.06
      ],
      "text": " in the future you get those dividends and then you're able to ship stuff really fast and actually"
    },
    {
      "timestamp": [
        899.06,
        904.34
      ],
      "text": " understand what's going on so those were 20 things i wish i knew when i first started programming"
    },
    {
      "timestamp": [
        904.34,
        908.58
      ],
      "text": " if you found this video helpful you'll want to watch this one next where i talk about how i"
    },
    {
      "timestamp": [
        908.58,
        911.14
      ],
      "text": " tricked my brain to be addicted to coding."
    }
  ]
}